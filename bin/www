#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const App = require('../app');
const logger = require('../src/logger');

/**
 * Create HTTP server.
 */

const service = new App();
const { appListener, actuatorListener } = service;

const appServer = http.createServer(appListener);
const actuatorServer = http.createServer(actuatorListener);

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    // eslint-disable-next-line no-restricted-globals
    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = (server) => () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    logger.debug(`Listening on ${bind}`);
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
appListener.set('port', port);

const actuatorPort = normalizePort(process.env.ACTUATOR_PORT || '8081');
actuatorListener.set('port', actuatorPort);

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        logger.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        logger.error(`${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
};

/**
 * Listen on provided port, on all network interfaces.
 */

const attachListeners = (server, serverPort) => {
    server.listen(serverPort);
    server.on('error', onError);
    server.on('listening', onListening(server));
};

if (process.env.NODE_ENV !== 'test') {
    attachListeners(appServer, port);
    attachListeners(actuatorServer, actuatorPort);
}
