{
  "name": "byline",
  "description": "super-simple line-by-line Stream reader",
  "homepage": "https://github.com/jahewson/node-byline",
  "bugs": {
    "url": "https://github.com/jahewson/node-byline/issues"
  },
  "version": "4.1.1",
  "author": {
    "name": "John Hewson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jahewson/node-byline"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "main": "./lib",
  "readme": "# byline -- buffered Stream for reading lines\n\n`byline` is a super-simple module providing a `LineStream` for [node.js](http://nodejs.org/).\n\n- node v0.10 `streams2` (transform stream)\n- supports `pipe`\n- supports both UNIX and Windows line endings\n- can wrap any readable stream\n- can be used as a readable-writable \"through-stream\" (transform stream)\n- super-simple: `stream = byline(stream);`\n\n## Install\n\n    npm install byline\n\nor from source:\n\n    git clone git://github.com/jahewson/node-byline.git\n\tcd node-byline\n\tnpm link\n\n#Convenience API\n\nThe `byline` module can be used as a function to quickly wrap a readable stream:\n\n```javascript\nvar fs = require('fs'),\n    byline = require('byline');\n\nvar stream = byline(fs.createReadStream('sample.txt', { encoding: 'utf8' }));\n```\n\nThe `data` event then emits lines:\n\n```javascript\nstream.on('data', function(line) {\n  console.log(line);\n});\n```\n\n#Standard API\n    \nYou just need to add one line to wrap your readable `Stream` with a `LineStream`.\n\n```javascript\nvar fs = require('fs'),\t\n    byline = require('byline');\n\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\n\nstream.on('data', function(line) {\n  console.log(line);\n});\n```\n\n#Piping\n\n`byline` supports `pipe` (though it strips the line endings, of course).\n\n```javascript\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\nstream.pipe(fs.createWriteStream('nolines.txt'));\n```\n\nAlternatively, you can create a readable/writable \"through-stream\" which doesn't wrap any specific stream:\n\n```javascript\nvar stream = fs.createReadStream('sample.txt');\nstream = byline.createStream(stream);\nstream.pipe(fs.createWriteStream('nolines.txt'));\n\t\nvar input = fs.createReadStream('LICENSE');\nvar lineStream = byline.createStream();\ninput.pipe(lineStream);\n\nvar output = fs.createWriteStream('test.txt');\nlineStream.pipe(output);\n```\n\n#Transform Stream\n\nThe `byline` transform stream can be directly manipulated like so:\n\n```javascript\nvar LineStream = require('byline').LineStream;\n\nvar input = fs.createReadStream('sample.txt');\nvar output = fs.createWriteStream('nolines.txt');\n\nvar lineStream = new LineStream();\ninput.pipe(lineStream);\nlineStream.pipe(output);\n\n```\n\n#Empty Lines\n\nBy default byline skips empty lines, if you want to keep them, pass the `keepEmptyLines` option in the call to `byline.createStream(stream, options)` or `byline(stream, options)`.\n\n#Tests\n\n    mocha -R spec\n\n#v0.8\n\nIf you want to use `node-byline` with node v0.8 then you can use the 2.1.x series. Simply use the following in your `package.json`:\n\n```javascript\n  \"dependencies\": {\n  \"byline\": \">=2.1.0 <3.0.0\"\n},\n```\n\n#Simple\nUnlike other modules (of which there are many), `byline` contains no:\n\n- monkeypatching\n- dependencies\n- non-standard 'line' events which break `pipe`\n- limitations to only file streams\n- CoffeeScript\n- mostly unnecessary code",
  "readmeFilename": "README.md",
  "_id": "byline@4.1.1",
  "dist": {
    "shasum": "d0d516935eb6761f8be31b5263f76c4640a041a3"
  },
  "deprecated": "critical bug fixed in v4.2.0",
  "_from": "byline@~4.1.1",
  "_resolved": "https://registry.npmjs.org/byline/-/byline-4.1.1.tgz"
}
