#!/usr/bin/env node
if (process.argv.length < 3 || process.argv.length > 4) {
  die('TSV to JSON\n' +
      'converts a list of numbered, tab-separated records with header row ' +
      'to a tree of JSON files.\n\n' +
      'usage: tsv-to-json file_or_uri_to_convert [output_folder]');
}

var fs = require('fs'),
    path = require('path'),
    mkdirp = require('mkdirp'),
    http = require('http'),
    byline = require('byline');

var source = process.argv[2],
    destination = process.argv[3],
    input,
    processor = processHeader,
    separator = '\t',
    fieldNames,
    lineCount = 0,
    recordCount = 0,
    maxIdLength = 8;

console.error('Converting ' + source + '...');

// Open HTTP stream if the source is a URL
if (source.match(/^https?:\/\//))
  http.request(source, processStream).end();
// Open a file stream otherwise
else
  processStream(fs.createReadStream(source));

/* Process the specified input stream */
function processStream(inputStream) {
  // Write possible header
  if (!destination)
    process.stdout.write('{\n"records": [\n');

  // Process data by line as long as there is a processor
  input = byline(inputStream).on('data', function (line) {
    lineCount++;
    if (processor)
      processor(line);
    else
      inputStream.destroy();
  })
  .on('end', function () {
    if (!destination) {
      process.stdout.write('\n]\n}\n');
      console.error('Converted ' + recordCount + ' records');
    }
    else {
      console.error('Converted ' + recordCount + ' records to JSON files in ' + destination);
    }
  });
}

/* Process the header line of a TSV file. */
function processHeader(line) {
  // Split line into field names
  fieldNames = line.split(separator);
  if (fieldNames.length < 2) {
    die('Expected at least two fields, but got:\n' + line);
  }

  // Report about found field names
  console.error('Found ' + fieldNames.length + ' fields:');
  console.error(' - ' + fieldNames.join('\n - '));
  console.error('ID field is ' + fieldNames[0]);

  // Process the next line as a record
  processor = processRecord;
}

/* Process a record line of a TSV file. */
function processRecord(line) {
  // Split line into fields
  var fields = line.split(separator);
  // Skip empty lines
  if (fieldNames.length < 2)
    return;

  // Generate object from record
  var record = Object.create(null);
  for (var i = 0; i < Math.min(fields.length, fieldNames.length); i++)
    record[fieldNames[i]] = fields[i];
  recordCount++;

  // Write to stdout if no destination folder specified
  if (!destination) {
    if (recordCount > 1) process.stdout.write(',\n');
    process.stdout.write(JSON.stringify(record));
    return;
  }

  // Determine record ID
  var id = fields[0];
  if (!id.match(/^\d+$/)) {
    die('Expected row identifier to be numeric, ' +
        'but got "' + id + '" at line ' + lineCount);
  }

  // Determine file name
  var fileName = destination;
  /*for (var i = 0; i < maxIdLength; i++) {
    // Start new folder every two digits, to avoid congestion
    if (i % 2 === 0)
      fileName += '/';
    // Pad with leading zeroes if necessary
    fileName += id[id.length + i - maxIdLength] || '0';
  }
  fileName += '.json';*/

  // Create file in directory
  try {
    //mkdirp.sync(path.dirname(fileName));
    fs.appendFileSync(fileName, JSON.stringify(record)+',\n');
  }
  catch (error) {Â die(error); }
}

/* Halt execution with an error message. */
function die(message) {
  console.error(message);
  process.exit(1);
}
