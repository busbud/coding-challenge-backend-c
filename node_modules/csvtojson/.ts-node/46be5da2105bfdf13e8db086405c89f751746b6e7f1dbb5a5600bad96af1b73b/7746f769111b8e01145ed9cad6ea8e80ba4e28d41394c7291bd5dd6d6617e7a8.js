"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var CSVError_1 = __importDefault(require("./CSVError"));
var set_1 = __importDefault(require("lodash/set"));
var numReg = /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/;
function default_1(csvRows, conv) {
    var res = [];
    for (var i = 0, len = csvRows.length; i < len; i++) {
        var r = processRow(csvRows[i], conv, i);
        if (r) {
            res.push(r);
        }
    }
    return res;
}
exports.default = default_1;
;
function processRow(row, conv, index) {
    if (conv.parseParam.checkColumn && conv.parseRuntime.headers && row.length !== conv.parseRuntime.headers.length) {
        throw (CSVError_1.default.column_mismatched(conv.parseRuntime.parsedLineNumber + index));
    }
    var headRow = conv.parseRuntime.headers || [];
    var resultRow = convertRowToJson(row, headRow, conv);
    if (resultRow) {
        return resultRow;
    }
    else {
        return null;
    }
}
function convertRowToJson(row, headRow, conv) {
    var hasValue = false;
    var resultRow = {};
    for (var i = 0, len = row.length; i < len; i++) {
        var item = row[i];
        if (conv.parseParam.ignoreEmpty && item === '') {
            continue;
        }
        hasValue = true;
        var head = headRow[i];
        if (!head || head === "") {
            head = headRow[i] = "field" + (i + 1);
        }
        var convFunc = getConvFunc(head, i, conv);
        if (convFunc) {
            var convRes = convFunc(item, head, resultRow, row, i);
            if (convRes !== undefined) {
                setPath(resultRow, head, convRes, conv, i);
            }
        }
        else {
            // var flag = getFlag(head, i, param);
            // if (flag === 'omit') {
            //   continue;
            // }
            if (conv.parseParam.checkType) {
                var convertFunc = checkType(item, head, i, conv);
                item = convertFunc(item);
            }
            if (item !== undefined) {
                setPath(resultRow, head, item, conv, i);
            }
        }
    }
    if (hasValue) {
        return resultRow;
    }
    else {
        return null;
    }
}
var builtInConv = {
    "string": stringType,
    "number": numberType,
    "omit": function () { }
};
function getConvFunc(head, i, conv) {
    if (conv.parseRuntime.columnConv[i] !== undefined) {
        return conv.parseRuntime.columnConv[i];
    }
    else {
        var flag = conv.parseParam.colParser[head];
        if (flag === undefined) {
            return conv.parseRuntime.columnConv[i] = null;
        }
        if (typeof flag === "object") {
            flag = flag.cellParser || "string";
        }
        if (typeof flag === "string") {
            flag = flag.trim().toLowerCase();
            var builtInFunc = builtInConv[flag];
            if (builtInFunc) {
                return conv.parseRuntime.columnConv[i] = builtInFunc;
            }
            else {
                return conv.parseRuntime.columnConv[i] = null;
            }
        }
        else if (typeof flag === "function") {
            return conv.parseRuntime.columnConv[i] = flag;
        }
        else {
            return conv.parseRuntime.columnConv[i] = null;
        }
    }
}
function setPath(resultJson, head, value, conv, headIdx) {
    if (!conv.parseRuntime.columnValueSetter[headIdx]) {
        if (conv.parseParam.flatKeys) {
            conv.parseRuntime.columnValueSetter[headIdx] = flatSetter;
        }
        else {
            if (head.indexOf(".") > -1) {
                if (conv.parseParam.colParser[head] && conv.parseParam.colParser[head].flat) {
                    conv.parseRuntime.columnValueSetter[headIdx] = flatSetter;
                }
                else {
                    conv.parseRuntime.columnValueSetter[headIdx] = jsonSetter;
                }
            }
            else {
                conv.parseRuntime.columnValueSetter[headIdx] = flatSetter;
            }
        }
    }
    conv.parseRuntime.columnValueSetter[headIdx](resultJson, head, value);
    // flatSetter(resultJson, head, value);
}
function flatSetter(resultJson, head, value) {
    resultJson[head] = value;
}
function jsonSetter(resultJson, head, value) {
    set_1.default(resultJson, head, value);
}
function checkType(item, head, headIdx, conv) {
    if (conv.parseRuntime.headerType[headIdx]) {
        return conv.parseRuntime.headerType[headIdx];
    }
    else if (head.indexOf('number#!') > -1) {
        return conv.parseRuntime.headerType[headIdx] = numberType;
    }
    else if (head.indexOf('string#!') > -1) {
        return conv.parseRuntime.headerType[headIdx] = stringType;
    }
    else if (conv.parseParam.checkType) {
        return conv.parseRuntime.headerType[headIdx] = dynamicType;
    }
    else {
        return conv.parseRuntime.headerType[headIdx] = stringType;
    }
}
function numberType(item) {
    var rtn = parseFloat(item);
    if (isNaN(rtn)) {
        return item;
    }
    return rtn;
}
function stringType(item) {
    return item.toString();
}
function dynamicType(item) {
    var trimed = item.trim();
    if (trimed === "") {
        return stringType(item);
    }
    if (numReg.test(trimed)) {
        return numberType(item);
    }
    else if (trimed.length === 5 && trimed.toLowerCase() === "false" || trimed.length === 4 && trimed.toLowerCase() === "true") {
        return booleanType(item);
    }
    else if (trimed[0] === "{" && trimed[trimed.length - 1] === "}" || trimed[0] === "[" && trimed[trimed.length - 1] === "]") {
        return jsonType(item);
    }
    else {
        return stringType(item);
    }
}
function booleanType(item) {
    var trimed = item.trim();
    if (trimed.length === 5 && trimed.toLowerCase() === "false") {
        return false;
    }
    else {
        return true;
    }
}
function jsonType(item) {
    try {
        return JSON.parse(item);
    }
    catch (e) {
        return item;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2t4aWFuZy93b3JrL3Byb2plY3RzL2NzdjJqc29uL3NyYy9saW5lVG9Kc29uLnRzIiwic291cmNlcyI6WyIvVXNlcnMva3hpYW5nL3dvcmsvcHJvamVjdHMvY3N2Mmpzb24vc3JjL2xpbmVUb0pzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx3REFBa0M7QUFFbEMsbURBQTZCO0FBRzdCLElBQUksTUFBTSxHQUFHLDBDQUEwQyxDQUFDO0FBRXhELG1CQUF5QixPQUFtQixFQUFFLElBQWU7SUFDM0QsSUFBTSxHQUFHLEdBQWlCLEVBQUUsQ0FBQztJQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xELElBQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxFQUFFO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNiO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFURCw0QkFTQztBQUFBLENBQUM7QUFLRixvQkFBb0IsR0FBYSxFQUFFLElBQWUsRUFBRSxLQUFLO0lBRXZELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDL0csTUFBTSxDQUFDLGtCQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFBO0tBQy9FO0lBRUQsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FB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QUFNLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLEVBQUU7UUFDNUgsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUI7U0FBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1FBQzNILE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZCO1NBQU07UUFDTCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7QUFFRCxxQkFBcUIsSUFBSTtJQUN2QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxFQUFFO1FBQzNELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBRUQsa0JBQWtCLElBQUk7SUFDcEIsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tIFwiLi9Db252ZXJ0ZXJcIjtcbmltcG9ydCBDU1ZFcnJvciBmcm9tIFwiLi9DU1ZFcnJvclwiO1xuaW1wb3J0IHsgQ2VsbFBhcnNlciwgQ29sdW1uUGFyYW0gfSBmcm9tIFwiLi9QYXJhbWV0ZXJzXCI7XG5pbXBvcnQgc2V0IGZyb20gXCJsb2Rhc2gvc2V0XCI7XG5pbXBvcnQgeyBQYXJzZVJ1bnRpbWUgfSBmcm9tIFwiLi9QYXJzZVJ1bnRpbWVcIjtcblxudmFyIG51bVJlZyA9IC9eWy0rXT9bMC05XSpcXC4/WzAtOV0rKFtlRV1bLStdP1swLTldKyk/JC87XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjc3ZSb3dzOiBzdHJpbmdbXVtdLCBjb252OiBDb252ZXJ0ZXIpOiBKU09OUmVzdWx0W10ge1xuICBjb25zdCByZXM6IEpTT05SZXN1bHRbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gY3N2Um93cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IHIgPSBwcm9jZXNzUm93KGNzdlJvd3NbaV0sIGNvbnYsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICByZXMucHVzaChyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5leHBvcnQgdHlwZSBKU09OUmVzdWx0ID0ge1xuICBba2V5OiBzdHJpbmddOiBhbnlcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1Jvdyhyb3c6IHN0cmluZ1tdLCBjb252OiBDb252ZXJ0ZXIsIGluZGV4KTogSlNPTlJlc3VsdCB8IG51bGwge1xuXG4gIGlmIChjb252LnBhcnNlUGFyYW0uY2hlY2tDb2x1bW4gJiYgY29udi5wYXJzZVJ1bnRpbWUuaGVhZGVycyAmJiByb3cubGVuZ3RoICE9PSBjb252LnBhcnNlUnVudGltZS5oZWFkZXJzLmxlbmd0aCkge1xuICAgIHRocm93IChDU1ZFcnJvci5jb2x1bW5fbWlzbWF0Y2hlZChjb252LnBhcnNlUnVudGltZS5wYXJzZWRMaW5lTnVtYmVyICsgaW5kZXgpKVxuICB9XG5cbiAgY29uc3QgaGVhZFJvdyA9IGNvbnYucGFyc2VSdW50aW1lLmhlYWRlcnMgfHwgW107XG4gIGNvbnN0IHJlc3VsdFJvdyA9IGNvbnZlcnRSb3dUb0pzb24ocm93LCBoZWFkUm93LCBjb252KTtcbiAgaWYgKHJlc3VsdFJvdykge1xuICAgIHJldHVybiByZXN1bHRSb3c7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydFJvd1RvSnNvbihyb3c6IHN0cmluZ1tdLCBoZWFkUm93OiBzdHJpbmdbXSwgY29udjogQ29udmVydGVyKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwge1xuICBsZXQgaGFzVmFsdWUgPSBmYWxzZTtcbiAgY29uc3QgcmVzdWx0Um93ID0ge307XG4gIFxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gcm93Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSByb3dbaV07XG5cbiAgICBpZiAoY29udi5wYXJzZVBhcmFtLmlnbm9yZUVtcHR5ICYmIGl0ZW0gPT09ICcnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaGFzVmFsdWUgPSB0cnVlO1xuXG4gICAgbGV0IGhlYWQgPSBoZWFkUm93W2ldO1xuICAgIGlmICghaGVhZCB8fCBoZWFkID09PSBcIlwiKSB7XG4gICAgICBoZWFkID0gaGVhZFJvd1tpXSA9IFwiZmllbGRcIiArIChpICsgMSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnZGdW5jID0gZ2V0Q29udkZ1bmMoaGVhZCwgaSwgY29udik7XG4gICAgaWYgKGNvbnZGdW5jKSB7XG4gICAgICBjb25zdCBjb252UmVzID0gY29udkZ1bmMoaXRlbSwgaGVhZCwgcmVzdWx0Um93LCByb3csIGkpO1xuICAgICAgaWYgKGNvbnZSZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRQYXRoKHJlc3VsdFJvdywgaGVhZCwgY29udlJlcywgY29udixpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdmFyIGZsYWcgPSBnZXRGbGFnKGhlYWQsIGksIHBhcmFtKTtcbiAgICAgIC8vIGlmIChmbGFnID09PSAnb21pdCcpIHtcbiAgICAgIC8vICAgY29udGludWU7XG4gICAgICAvLyB9XG4gICAgICBpZiAoY29udi5wYXJzZVBhcmFtLmNoZWNrVHlwZSkge1xuICAgICAgICBjb25zdCBjb252ZXJ0RnVuYyA9IGNoZWNrVHlwZShpdGVtLCBoZWFkLCBpLCBjb252KTtcbiAgICAgICAgaXRlbSA9IGNvbnZlcnRGdW5jKGl0ZW0pO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRQYXRoKHJlc3VsdFJvdywgaGVhZCwgaXRlbSwgY29udixpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgcmV0dXJuIHJlc3VsdFJvdztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5jb25zdCBidWlsdEluQ29udjogeyBba2V5OiBzdHJpbmddOiBDZWxsUGFyc2VyIH0gPSB7XG4gIFwic3RyaW5nXCI6IHN0cmluZ1R5cGUsXG4gIFwibnVtYmVyXCI6IG51bWJlclR5cGUsXG4gIFwib21pdFwiOiBmdW5jdGlvbiAoKSB7IH1cbn1cbmZ1bmN0aW9uIGdldENvbnZGdW5jKGhlYWQ6IHN0cmluZywgaTogbnVtYmVyLCBjb252OiBDb252ZXJ0ZXIpOiBDZWxsUGFyc2VyIHwgbnVsbCB7XG4gIGlmIChjb252LnBhcnNlUnVudGltZS5jb2x1bW5Db252W2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY29udi5wYXJzZVJ1bnRpbWUuY29sdW1uQ29udltpXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmxhZyA9IGNvbnYucGFyc2VQYXJhbS5jb2xQYXJzZXJbaGVhZF07XG4gICAgaWYgKGZsYWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvbnYucGFyc2VSdW50aW1lLmNvbHVtbkNvbnZbaV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZsYWcgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGZsYWcgPSAoZmxhZyBhcyBDb2x1bW5QYXJhbSkuY2VsbFBhcnNlciB8fCBcInN0cmluZ1wiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZsYWcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGZsYWcgPSBmbGFnLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgYnVpbHRJbkZ1bmMgPSBidWlsdEluQ29udltmbGFnXTtcbiAgICAgIGlmIChidWlsdEluRnVuYykge1xuICAgICAgICByZXR1cm4gY29udi5wYXJzZVJ1bnRpbWUuY29sdW1uQ29udltpXSA9IGJ1aWx0SW5GdW5jO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnYucGFyc2VSdW50aW1lLmNvbHVtbkNvbnZbaV0gPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGZsYWcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGNvbnYucGFyc2VSdW50aW1lLmNvbHVtbkNvbnZbaV0gPSBmbGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29udi5wYXJzZVJ1bnRpbWUuY29sdW1uQ29udltpXSA9IG51bGw7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRQYXRoKHJlc3VsdEpzb246IGFueSwgaGVhZDogc3RyaW5nLCB2YWx1ZTogYW55LCBjb252OiBDb252ZXJ0ZXIsaGVhZElkeDpudW1iZXIpIHtcbiAgaWYgKCFjb252LnBhcnNlUnVudGltZS5jb2x1bW5WYWx1ZVNldHRlcltoZWFkSWR4XSkge1xuICAgIGlmIChjb252LnBhcnNlUGFyYW0uZmxhdEtleXMpIHtcbiAgICAgIGNvbnYucGFyc2VSdW50aW1lLmNvbHVtblZhbHVlU2V0dGVyW2hlYWRJZHhdID0gZmxhdFNldHRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhlYWQuaW5kZXhPZihcIi5cIikgPiAtMSkge1xuICAgICAgICBpZiAoY29udi5wYXJzZVBhcmFtLmNvbFBhcnNlcltoZWFkXSAmJiAoY29udi5wYXJzZVBhcmFtLmNvbFBhcnNlcltoZWFkXSBhcyBDb2x1bW5QYXJhbSkuZmxhdCkge1xuICAgICAgICAgIGNvbnYucGFyc2VSdW50aW1lLmNvbHVtblZhbHVlU2V0dGVyW2hlYWRJZHhdID0gZmxhdFNldHRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb252LnBhcnNlUnVudGltZS5jb2x1bW5WYWx1ZVNldHRlcltoZWFkSWR4XSA9IGpzb25TZXR0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnYucGFyc2VSdW50aW1lLmNvbHVtblZhbHVlU2V0dGVyW2hlYWRJZHhdID0gZmxhdFNldHRlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29udi5wYXJzZVJ1bnRpbWUuY29sdW1uVmFsdWVTZXR0ZXJbaGVhZElkeF0ocmVzdWx0SnNvbiwgaGVhZCwgdmFsdWUpO1xuICAvLyBmbGF0U2V0dGVyKHJlc3VsdEpzb24sIGhlYWQsIHZhbHVlKTtcblxufVxuZnVuY3Rpb24gZmxhdFNldHRlcihyZXN1bHRKc29uOiBhbnksIGhlYWQ6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICByZXN1bHRKc29uW2hlYWRdID0gdmFsdWU7XG59XG5mdW5jdGlvbiBqc29uU2V0dGVyKHJlc3VsdEpzb246IGFueSwgaGVhZDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gIHNldChyZXN1bHRKc29uLCBoZWFkLCB2YWx1ZSk7XG59XG5cblxuZnVuY3Rpb24gY2hlY2tUeXBlKGl0ZW06IHN0cmluZywgaGVhZDogc3RyaW5nLCBoZWFkSWR4OiBudW1iZXIsIGNvbnY6IENvbnZlcnRlcik6IEZ1bmN0aW9uIHtcbiAgaWYgKGNvbnYucGFyc2VSdW50aW1lLmhlYWRlclR5cGVbaGVhZElkeF0pIHtcbiAgICByZXR1cm4gY29udi5wYXJzZVJ1bnRpbWUuaGVhZGVyVHlwZVtoZWFkSWR4XTtcbiAgfSBlbHNlIGlmIChoZWFkLmluZGV4T2YoJ251bWJlciMhJykgPiAtMSkge1xuICAgIHJldHVybiBjb252LnBhcnNlUnVudGltZS5oZWFkZXJUeXBlW2hlYWRJZHhdID0gbnVtYmVyVHlwZTtcbiAgfSBlbHNlIGlmIChoZWFkLmluZGV4T2YoJ3N0cmluZyMhJykgPiAtMSkge1xuICAgIHJldHVybiBjb252LnBhcnNlUnVudGltZS5oZWFkZXJUeXBlW2hlYWRJZHhdID0gc3RyaW5nVHlwZTtcbiAgfSBlbHNlIGlmIChjb252LnBhcnNlUGFyYW0uY2hlY2tUeXBlKSB7XG4gICAgcmV0dXJuIGNvbnYucGFyc2VSdW50aW1lLmhlYWRlclR5cGVbaGVhZElkeF0gPSBkeW5hbWljVHlwZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udi5wYXJzZVJ1bnRpbWUuaGVhZGVyVHlwZVtoZWFkSWR4XSA9IHN0cmluZ1R5cGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVtYmVyVHlwZShpdGVtKSB7XG4gIHZhciBydG4gPSBwYXJzZUZsb2F0KGl0ZW0pO1xuICBpZiAoaXNOYU4ocnRuKSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9XG4gIHJldHVybiBydG47XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1R5cGUoaXRlbTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGl0ZW0udG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gZHluYW1pY1R5cGUoaXRlbSkge1xuICB2YXIgdHJpbWVkID0gaXRlbS50cmltKCk7XG4gIGlmICh0cmltZWQgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gc3RyaW5nVHlwZShpdGVtKTtcbiAgfVxuICBpZiAobnVtUmVnLnRlc3QodHJpbWVkKSkge1xuICAgIHJldHVybiBudW1iZXJUeXBlKGl0ZW0pO1xuICB9IGVsc2UgaWYgKHRyaW1lZC5sZW5ndGggPT09IDUgJiYgdHJpbWVkLnRvTG93ZXJDYXNlKCkgPT09IFwiZmFsc2VcIiB8fCB0cmltZWQubGVuZ3RoID09PSA0ICYmIHRyaW1lZC50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIikge1xuICAgIHJldHVybiBib29sZWFuVHlwZShpdGVtKTtcbiAgfSBlbHNlIGlmICh0cmltZWRbMF0gPT09IFwie1wiICYmIHRyaW1lZFt0cmltZWQubGVuZ3RoIC0gMV0gPT09IFwifVwiIHx8IHRyaW1lZFswXSA9PT0gXCJbXCIgJiYgdHJpbWVkW3RyaW1lZC5sZW5ndGggLSAxXSA9PT0gXCJdXCIpIHtcbiAgICByZXR1cm4ganNvblR5cGUoaXRlbSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cmluZ1R5cGUoaXRlbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYm9vbGVhblR5cGUoaXRlbSkge1xuICB2YXIgdHJpbWVkID0gaXRlbS50cmltKCk7XG4gIGlmICh0cmltZWQubGVuZ3RoID09PSA1ICYmIHRyaW1lZC50b0xvd2VyQ2FzZSgpID09PSBcImZhbHNlXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24ganNvblR5cGUoaXRlbSkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGl0ZW0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbn1cbiJdfQ==