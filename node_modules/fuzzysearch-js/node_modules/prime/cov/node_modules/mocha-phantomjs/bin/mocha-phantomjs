#!/usr/bin/env node

var program = require('commander'),
      spawn = require('child_process').spawn,
      print = require('util').print,
         fs = require('fs'),
       path = require('path'),
     exists = fs.existsSync || path.existsSync,
        cwd = process.cwd(),
    cookies = {},
    headers = {},
   settings = {};

function keyValue(val, store) {
  val = val.split('=');
  if (val[1] === 'true') {
    val[1] = true;
  } else if (val[1] === 'false') {
    val[1] = false;
  }
  store[val[0]] = val[1];
  return val;
}
function cookie(val) {
  return keyValue(val, cookies);
}
function header(val) {
  return keyValue(val, headers);
}
function setting(val) {
  return keyValue(val, settings);
}
function viewport(val) {
  val = val.split('x');
  return {
    width: parseFloat(val[0]),
    height: parseFloat(val[1])
  };
}

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] page')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'spec')
  .option('-t, --timeout <timeout>', 'specify the test startup timeout to use', parseInt, 6000)
  .option('-A, --agent <userAgent>', 'specify the user agent to use')
  .option('-c, --cookie <name>=<value>', 'specify cookie', cookie)
  .option('-h, --header <name>=<value>', 'specify custom header', header)
  .option('-s, --setting <key>=<value>', 'specify specific phantom settings', setting)
  .option('-v, --view <width>x<height>', 'specify phantom viewport size', viewport);

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ mocha-phantomjs -R dot /test/file.html');
  console.log('    $ mocha-phantomjs http://testserver.com/file.html');
  console.log('');
});

program.parse(process.argv);

if (!program.args.length) { program.outputHelp(); process.exit(1); };
if (program.agent) { settings.userAgent = program.agent; }

var script   = fs.realpathSync(__dirname + '/../lib/mocha-phantomjs.coffee');
var reporter = program.reporter;
var page     = function(){
  var arg = program.args[0];
  if (arg.match(/file:\/\//))   { return arg; };
  if (arg.match(/http:\/\//))   { return arg; };
  if (arg.match(/https:\/\//))  { return arg; };
  if (exists(arg))              { return arg; };
  if (exists(cwd+'/'+arg))      { return fs.realpathSync(cwd+'/'+arg); };
  return arg;
}();
var config = JSON.stringify({
  timeout: program.timeout,
  cookies: cookies,
  headers: headers,
  settings: settings,
  viewportSize: program.view
});
var spawnArgs = [script, page, reporter, config];

var phantomjs;
for (var i=0; i < module.paths.length; i++) {
  var bin = path.join(module.paths[i], '.bin/phantomjs');
  if (process.platform === 'win32') {
    bin += '.cmd';
  }
  if (exists(bin)) {
    phantomjs = spawn(bin, spawnArgs);
    break;
  }
}
if (phantomjs === undefined) { phantomjs = spawn('phantomjs', spawnArgs); }

phantomjs.stdout.on('data', function(data){
  print(data.toString());
})

phantomjs.on('exit', function(code){
  if (code === 127) { print("Perhaps phantomjs is not installed?\n"); }
  process.exit(code);
})

