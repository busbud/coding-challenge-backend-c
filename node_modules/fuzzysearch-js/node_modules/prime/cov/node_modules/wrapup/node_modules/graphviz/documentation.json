[ { tags: [],
    description: 
     { full: [32m'Module dependencies.'[39m,
       summary: [32m'Module dependencies.'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'var path = require(\'path\'),\n  spawn  = require(\'child_process\').spawn,\n  temp = require(\'temp\'),\n  fs = require(\'fs\'),\n  fsExt = require(\'./deps/core_ext/fs-ext\'),\n  Graph = require(\'./deps/graph\').Graph;'[39m,
    ctx: 
     { type: [32m'declaration'[39m,
       name: [32m'path'[39m,
       value: [32m'require(\'path\'),'[39m,
       string: [32m'path'[39m } },
  { tags: 
     [ { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'String'[39m ],
         name: [32m'id'[39m,
         description: [32m'The graphID'[39m },
       { type: [32m'return'[39m,
         types: [ [32m'Graph'[39m ],
         description: [32m''[39m },
       { type: [32m'api'[39m, visibility: [32m'public'[39m } ],
    description: 
     { full: [32m'Create a new undirected graph'[39m,
       summary: [32m'Create a new undirected graph'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'exports.graph = function(id) {\n  var graph = new Graph(null, id);\n  graph.type = \'graph\';\n  return graph;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'exports'[39m,
       name: [32m'graph'[39m,
       string: [32m'exports.graph()'[39m } },
  { tags: 
     [ { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'String'[39m ],
         name: [32m'id'[39m,
         description: [32m'The graphID'[39m },
       { type: [32m'return'[39m,
         types: [ [32m'Graph'[39m ],
         description: [32m''[39m },
       { type: [32m'api'[39m, visibility: [32m'public'[39m } ],
    description: 
     { full: [32m'Create a new directed graph'[39m,
       summary: [32m'Create a new directed graph'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'exports.digraph = function(id) {\n  var graph = new Graph(null, id);\n  graph.type = \'digraph\';\n  return graph;  \n};\n\nfunction _parse(file, callback, errback) {\n  var gvprScript = path.join(__dirname, "ext", "gvpr", "dot2js.g"),\n    parameters = ["-f" + gvprScript, file],\n    cmd = "gvpr",\n    __graph_eval,\n    err = \'\',\n    out = \'\',\n    graphviz = spawn(cmd, parameters);\n\n  graphviz.stdout.on(\'data\', function(data) {\n    out += data;\n    eval(data.toString());\n  });\n  graphviz.stderr.on(\'data\', function(data) {\n    err += data;\n  });\n  graphviz.stdin.end();\n  graphviz.on(\'exit\', function(code) {\n    if(code !== 0 || __graph_eval === undefined) {\n      if(errback) { \n        errback(code, out, err); \n      }\n    } else {\n      callback(__graph_eval);\n    }\n  });\n}'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'exports'[39m,
       name: [32m'digraph'[39m,
       string: [32m'exports.digraph()'[39m } },
  { tags: 
     [ { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'String'[39m ],
         name: [32m'file_or_script'[39m,
         description: [32m'The DOT script or file'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'callback'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'errback'[39m,
         description: [32m''[39m },
       { type: [32m'api'[39m, visibility: [32m'public'[39m } ],
    description: 
     { full: [32m'Create a new graph from a dot script'[39m,
       summary: [32m'Create a new graph from a dot script'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'exports.parse = function(file_or_script, callback, errback) {\n  if(fsExt.exist(file_or_script)) {\n    _parse(file_or_script, callback, errback);\n  } else {\n    temp.open(\'node-graphviz\', function(err, info) {\n      fs.write(info.fd, file_or_script);\n      fs.close(info.fd, function(err) {\n        _parse(info.path, callback, errback);\n      });\n    });\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'exports'[39m,
       name: [32m'parse'[39m,
       string: [32m'exports.parse()'[39m } } ]
