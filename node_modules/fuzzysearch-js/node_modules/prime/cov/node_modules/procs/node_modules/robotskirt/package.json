{
  "name": "robotskirt",
  "description": "A node wrapper for the awesome C markdown parsing library, sundown.",
  "keywords": [
    "sundown",
    "upskirt",
    "robot",
    "markdown",
    "mkd",
    "md"
  ],
  "version": "2.6.1",
  "homepage": "http://benmills.org/robotskirt",
  "author": {
    "name": "Ben Mills",
    "email": "ben@bmdev.org"
  },
  "maintainers": [
    {
      "name": "Ben Mills",
      "email": "ben@bmdev.org"
    },
    {
      "name": "Xavier Mendez",
      "email": "jmendeth@gmail.com"
    }
  ],
  "contributors": [
    {
      "name": "Ben Mills",
      "email": "ben@bmdev.org"
    },
    {
      "name": "Xavier Mendez",
      "email": "jmendeth@gmail.com"
    },
    {
      "name": "Farrin Reid",
      "email": "blakmatrix@gmail.com"
    },
    {
      "name": "Jeremy Kahn",
      "email": "jeremyckahn@gmail.com"
    },
    {
      "name": "lhagan",
      "email": "luke@lukehagan.com"
    },
    {
      "name": "Ryan Graham",
      "email": "r.m.graham@gmail.com"
    },
    {
      "name": "tbranyen",
      "email": "tim@tabdeveloper.com"
    }
  ],
  "main": "./build/Release/robotskirt",
  "man": [
    "man/robotskirt.1"
  ],
  "engines": {
    "node": ">= 0.6"
  },
  "scripts": {
    "install": "node-waf clean ; node-waf configure build"
  },
  "directories": {
    "bin": "./bin",
    "src": "./src",
    "man": "./man",
    "doc": "./doc",
    "example": "./examples"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/benmills/robotskirt.git"
  },
  "bugs": {
    "url": "https://github.com/benmills/robotskirt/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "bin": {
    "robotskirt": "bin/robotskirt"
  },
  "readme": "# Robotskirt\n\nRobotskirt is a [Node.JS](http://nodejs.org) wrapper for the [Sundown](https://github.com/vmg/sundown)\nlibrary.\n\nIt was inspired by the Redcarpet gem [released by GitHub](https://github.com/blog/832-rolling-out-the-redcarpet) (the bindings to [Ruby](http://www.ruby-lang.org)).  \nWith the arrival of version 2 after much work, Robotskirt now mirrors every feature of Redcarpet, see below.  \nIt even has [additional features](#other-utilities)!\n\nFull documentation can be found under the `doc` folder.  \nRobotskirt is distributed under the **MIT license**, see `LICENSE`.\n\n## Performance\n\nThanks to Sundown, Robotskirt is able to render markdown many times faster than other Markdown libraries.  \nWith v2, efforts have been put to make it even lighter.\n\nSundown is well known for its **security**, **speed** and **flexibility**.  \nRobotskirt benefits from these features and tries to make the wrapping layer as thin as possible.\n\nRobotskirt includes a small script to benchmark it against other popular markdown libraries.  \nIt runs the official Markdown test suite 1000 times with each item.\n\nResults on a Thinkpad T400 running Ubuntu 12.04 and\nNode 0.8.8 (currently the latest stable version):\n\n```bash\n$ node benchmark --bench\n[1] robotskirt (reuse all) completed in 1354ms.\n[2] robotskirt (convenience, reuse all) completed in 1353ms.\n[3] robotskirt (new renderer and parser) completed in 3816ms.\n[4] robotskirt (convenience, new parser) completed in 1534ms.\n[5] marked completed in 3842ms.\n[6] discount completed in 6025ms.\n6 targets benchmarked successfully.\n```\n\n## Install\n\nThe best way to install Robotskirt is by using [NPM](https://github.com/isaacs/npm).  \nIf you want to install it globally, remember to use `sudo` and `-g`.\n\n```bash\nnpm install robotskirt\n```\n\n**Important:** you *don't need* to have Sundown installed: Robotskirt comes bundled  \nwith a specific Sundown version. Just install Robotskirt as any other module.\n\nRobotskirt uses `node-waf` to compile\n(although we'll switch to [Node-GYP](https://github.com/TooTallNate/node-gyp) soon).\n\n## Getting started\n\nCurrently there are two ways of using Robotskirt:\n[normal](#the-normal-way) and [convenience](#the-convenience-way).  \nWe recommend you to learn both (hey, it's just two classes!) and see the [examples](#examples).\n\n## The Normal Way\n\nTo parse Markdown, we first need a **renderer**. It takes the parsed Markdown,  \nand produces the final output (can be HTML, XHTML,\n[ANSI](https://github.com/benmills/robotskirt/blob/master/examples/ansi-rend.js), plain text, ...).\n\nOn most cases you will use Sundown's (X)HTML renderer:\n\n```javascript\nvar rs = require('robotskirt');\nvar renderer = new rs.HtmlRenderer();\n```\n\nThen, you make a **parser** that uses your renderer:\n\n```javascript\nvar parser = new rs.Markdown(renderer);\n```\n\nThat's it! You can now start rendering your markdown:\n\n```javascript\nparser.render('Hey, *this* is `code` with ÚŦF châracters!')\n// '<p>Hey, <em>this</em> is <code>code</code> with ÚŦF châracters!</p>\\n'\n```\n\n**Always reuse yor parsers/renderers!** As you can see in the [benchmark](#performance),  \nmaking and using the same pair to render everything saves a _lot_ of time.  \nIf you can't reuse them (for example, because the flags are supplied by the user),  \nconsider using [the convenience way](#the-convenience-way).\n\nOK. Want to customize the output a bit? Keep reading.\n\n### Using markdown extensions\n\nJust using `new Markdown(renderer)` will parse **pure markdown**.\nHowever, you can have it  \nunderstand special _extensions_ such as fenced code blocks,\nstrikethrough, tables and more!\n\nFor example, the following will enable tables and autolinking:\n\n```javascript\nvar parser = new rs.Markdown(renderer, [rs.EXT_TABLES, rs.EXT_AUTOLINK]);\n```\n\nYou can see the full list of extensions in the docs.\n\n### HTML rendering flags\n\nJust as with extensions, you can pass certain flags to the HTML renderer.\n\nFor example, the following will use strict XHTML\nand skip all the `<image>` tags:\n\n```javascript\nvar renderer = new rs.HtmlRenderer([rs.HTML_USE_XHTML, rs.HTML_SKIP_IMAGES]);\n```\n\nYou can see the full list of HTML flags in the docs.\n\n### UTF handling\n\nSundown is fully UTF-8 aware, both when handling and rendering.  \nRobotskirt will take care of the encoding and decoding tasks for you.\n\n### Custom renderers!\n\nA renderer is just a set of functions.  \nEach time the parser finds a piece of Markdown it'll call the appropiate function in the renderer.  \nIf the function is not set (`undefined`), the Markdown will be skipped or copied untouched.\n\nSome use cases of custom renderers:\n\n#### Highlighting code blocks\n\n```javascript\nvar renderer = new rs.HtmlRenderer();\nrenderer.blockcode = function (code, language) {\n  if (language === undefined) {\n    //No language was provided, don't highlight\n    return '<pre>' + escapeHtml(code) + '</pre>';\n  }\n  return pygments.highlight(code, {\"lang\": language, \"indent\": 2});\n};\n```\n\nYou can see the full list of renderer functions in the docs.\n\n#### Renderer from scratch\n\nIf you don't feel comfortable extending the `HtmlRenderer` class,  \nyou can build a renderer from scratch by extending the base class: `Renderer`.  \nAll renderers inherit from this class. It contains all functions set to `undefined`.\n\n## The Convenience Way\n\nWhen you don't need custom renderers at all, you can just write:\n\n```javascript\nvar rs = require('robotskirt');\nvar parser = rs.Markdown.std();\nparser.render(...);\n```\n\nThat'll build a renderer/parser pair for you.  \nIt's **faster than building them manually**, because it happens natively.\n\nYou can pass **extension** and **HTML** flags to it, respectively:\n\n```javascript\nvar parser = rs.Markdown.std([rs.EXT_TABLES, rs.EXT_AUTOLINK],\n                             [rs.HTML_USE_XHTML, rs.HTML_SKIP_IMAGES]);\nparser.render('This becomes http://autolink.ed in XHTML!');\n// '<p>This becomes <a href=\"http://autolink.ed\">http://autolink.ed</a> in XHTML!</p>\\n'\n```\n\nKeep in mind that **no other types of renderer can be chosen**,  \nand **you don't have access to the HTML renderer used**.\n\n## Examples\n\nTODO\n\n## Other utilities\n\nRobotskirt includes some useful utilities. Code speaks by itself:\n\n##### [Houdini](https://github.com/vmg/houdini), the escapist\n\n``` javascript\n> var rs = require('robotskirt')\n> rs.houdini.escapeHTML('<b>Some code to escape.</b> <a title=\"Click me!\">Me & you.</a>')\n'&lt;b&gt;Some code to escape.&lt;&#47;b&gt; &lt;a title=&quot;Click me!&quot;&gt;Me &amp; you.&lt;&#47;a&gt;'\n> rs.houdini.unescapeURL('Include+5%25+me%2Bin+a-query%3F+W%C3%ADth%C3%99TF%21')\n'Include 5% me in a-query? WíthÙTF!'\n```\n\n##### [SmartyPants](http://daringfireball.net/projects/smartypants)\n\nOften used in conjunction with Markdown.  \nIt makes \"smart\" punctuation. See more on [its homepage](http://daringfireball.net/projects/smartypants).\n\n```javascript\n> rs.smartypantsHtml('And I said ---to him--- \"no worries\"...');\n'And I said &mdash;to him&mdash; &ldquo;no worries&rdquo;&hellip;'\n```\n\nSundown implements SmartyPants with the same\nspeed and security as usual.\n\n##### Sundown's Autolink-er\n\n```javascript\n//COMING SOON!\n```\n\n##### Version stuff\n\n``` javascript\n> rs.versions.sundown\n<Version 1.16.0>\n> rs.versions.robotskirt.toString() //String formatted version\n'2.5.1'\n> console.log('Sundown is at %s. Robotskirt is at %s',\n... rs.versions.sundown, rs.versions.robotskirt);\nSundown is at 1.16.0. Robotskirt is at 2.5.1.\n> rs.versions.sundown.minor\n16\n> rs.versions.robotskirt instanceof rs.Version\ntrue\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "robotskirt@2.6.1",
  "_from": "robotskirt@2.6"
}
