var __$coverCall, __$coverInit, __$coverInitRange;
(function(fs){
	"use strict";
	var update = function(cb){
		return function(a, b, c, d){
			var json = JSON.parse(fs.readFileSync("/home/arian/www/prime/cov.json").toString() || '{}');
			cb(json, a, b);
			fs.writeFileSync("/home/arian/www/prime/cov.json", JSON.stringify(json, null, 2));
		};
	};
	__$coverInit = update(function(json, name, code){
		if (!json[name]) json[name] = {__code: code};
	});
	__$coverInitRange = update(function(json, name, range){
		if (!json[name][range]) json[name][range] = 0;
	});
	__$coverCall = update(function(json, name, range){
		json[name][range]++;
	});
})(require('fs'));
__$coverInit("emitter.js", "/*\nEmitter\n*/\"use strict\"\n\nvar prime = require(\"./index\"),\n    defer = require(\"./defer\"),\n    slice = Array.prototype.slice\n\nvar EID = 0\n\nmodule.exports = prime({\n\n    on: function(event, fn){\n        var listeners = this._listeners || (this._listeners = {}),\n            events = listeners[event] || (listeners[event] = {})\n\n        for (var k in events) if (events[k] === fn) return this\n\n        events[(EID++).toString(36)] = fn\n        return this\n    },\n\n    off: function(event, fn){\n        var listeners = this._listeners, events, key, length = 0\n        if (listeners && (events = listeners[event])){\n\n            for (var k in events){\n                length++\n                if (key == null && events[k] === fn) key = k\n                if (key && length > 1) break\n            }\n\n            if (key){\n                delete events[key]\n                if (length === 1){\n                    delete listeners[event]\n                    for (var l in listeners) return this\n                    delete this._listeners\n                }\n            }\n        }\n        return this\n    },\n\n    emit: function(event){\n        var listeners = this._listeners, events\n        if (listeners && (events = listeners[event])){\n            var args = (arguments.length > 1) ? slice.call(arguments, 1) : []\n            defer(function(){\n                var copy = {}\n                for (var k in events) copy[k] = events[k]\n                for (var k in copy) copy[k].apply(this, args)\n            })\n        }\n        return this\n    }\n\n})\n");
__$coverInitRange("emitter.js", "13:26");
__$coverInitRange("emitter.js", "27:125");
__$coverInitRange("emitter.js", "126:138");
__$coverInitRange("emitter.js", "139:1542");
__$coverInitRange("emitter.js", "202:334");
__$coverInitRange("emitter.js", "335:399");
__$coverInitRange("emitter.js", "400:441");
__$coverInitRange("emitter.js", "442:457");
__$coverInitRange("emitter.js", "500:564");
__$coverInitRange("emitter.js", "565:1070");
__$coverInitRange("emitter.js", "1080:1095");
__$coverInitRange("emitter.js", "625:791");
__$coverInitRange("emitter.js", "806:1060");
__$coverInitRange("emitter.js", "664:688");
__$coverInitRange("emitter.js", "689:749");
__$coverInitRange("emitter.js", "750:777");
__$coverInitRange("emitter.js", "832:866");
__$coverInitRange("emitter.js", "867:1046");
__$coverInitRange("emitter.js", "906:949");
__$coverInitRange("emitter.js", "950:1006");
__$coverInitRange("emitter.js", "1007:1045");
__$coverInitRange("emitter.js", "1135:1182");
__$coverInitRange("emitter.js", "1183:1511");
__$coverInitRange("emitter.js", "1521:1536");
__$coverInitRange("emitter.js", "1242:1319");
__$coverInitRange("emitter.js", "1320:1510");
__$coverInitRange("emitter.js", "1354:1383");
__$coverInitRange("emitter.js", "1384:1441");
__$coverInitRange("emitter.js", "1442:1499");
__$coverCall('emitter.js', '13:26');
'use strict';
__$coverCall('emitter.js', '27:125');
var prime = require('./index'), defer = require('./defer'), slice = Array.prototype.slice;
__$coverCall('emitter.js', '126:138');
var EID = 0;
__$coverCall('emitter.js', '139:1542');
module.exports = prime({
    on: function (event, fn) {
        __$coverCall('emitter.js', '202:334');
        var listeners = this._listeners || (this._listeners = {}), events = listeners[event] || (listeners[event] = {});
        __$coverCall('emitter.js', '335:399');
        for (var k in events)
            if (events[k] === fn)
                return this;
        __$coverCall('emitter.js', '400:441');
        events[(EID++).toString(36)] = fn;
        __$coverCall('emitter.js', '442:457');
        return this;
    },
    off: function (event, fn) {
        __$coverCall('emitter.js', '500:564');
        var listeners = this._listeners, events, key, length = 0;
        __$coverCall('emitter.js', '565:1070');
        if (listeners && (events = listeners[event])) {
            __$coverCall('emitter.js', '625:791');
            for (var k in events) {
                __$coverCall('emitter.js', '664:688');
                length++;
                __$coverCall('emitter.js', '689:749');
                if (key == null && events[k] === fn)
                    key = k;
                __$coverCall('emitter.js', '750:777');
                if (key && length > 1)
                    break;
            }
            __$coverCall('emitter.js', '806:1060');
            if (key) {
                __$coverCall('emitter.js', '832:866');
                delete events[key];
                __$coverCall('emitter.js', '867:1046');
                if (length === 1) {
                    __$coverCall('emitter.js', '906:949');
                    delete listeners[event];
                    __$coverCall('emitter.js', '950:1006');
                    for (var l in listeners)
                        return this;
                    __$coverCall('emitter.js', '1007:1045');
                    delete this._listeners;
                }
            }
        }
        __$coverCall('emitter.js', '1080:1095');
        return this;
    },
    emit: function (event) {
        __$coverCall('emitter.js', '1135:1182');
        var listeners = this._listeners, events;
        __$coverCall('emitter.js', '1183:1511');
        if (listeners && (events = listeners[event])) {
            __$coverCall('emitter.js', '1242:1319');
            var args = arguments.length > 1 ? slice.call(arguments, 1) : [];
            __$coverCall('emitter.js', '1320:1510');
            defer(function () {
                __$coverCall('emitter.js', '1354:1383');
                var copy = {};
                __$coverCall('emitter.js', '1384:1441');
                for (var k in events)
                    copy[k] = events[k];
                __$coverCall('emitter.js', '1442:1499');
                for (var k in copy)
                    copy[k].apply(this, args);
            });
        }
        __$coverCall('emitter.js', '1521:1536');
        return this;
    }
});