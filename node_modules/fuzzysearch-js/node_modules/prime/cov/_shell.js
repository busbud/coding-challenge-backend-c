var __$coverCall, __$coverInit, __$coverInitRange;
(function(fs){
	"use strict";
	var update = function(cb){
		return function(a, b, c, d){
			var json = JSON.parse(fs.readFileSync("/home/arian/www/prime/cov.json").toString() || '{}');
			cb(json, a, b);
			fs.writeFileSync("/home/arian/www/prime/cov.json", JSON.stringify(json, null, 2));
		};
	};
	__$coverInit = update(function(json, name, code){
		if (!json[name]) json[name] = {__code: code};
	});
	__$coverInitRange = update(function(json, name, range){
		if (!json[name][range]) json[name][range] = 0;
	});
	__$coverCall = update(function(json, name, range){
		json[name][range]++;
	});
})(require('fs'));
__$coverInit("_shell.js", "/*\nshell\n*/\"use strict\"\n\nvar prime = require(\"./index\"),\n    type  = require(\"./type\"),\n    forIn = require(\"./object/forIn\")\n\nvar slice = Array.prototype.slice,\n    push  = Array.prototype.push\n\nvar ghost = prime({\n\n    constructor: function ghost(self){\n\n        this.valueOf = function(){\n            return self\n        }\n\n        this.toString = function(){\n            return self + \"\"\n        }\n\n        this.is = function(object){\n            return self === object\n        }\n\n        this.get = function(index){\n            return self[index]\n        }\n\n        this.set = function(index, value){\n            self[index] = value\n            return self\n        }\n    }\n\n})\n\nvar shell = function(self){\n    if (self == null || self instanceof ghost) return self\n    var g = shell[type(self)]\n    return (g) ? new g(self) : self\n}\n\nvar register = function(){\n\n    var g = prime({inherits: ghost})\n\n    var s = prime(function(self){\n        return new g(self)\n    })\n\n    s.extend = function(object){\n\n        var self = this\n\n        forIn(object, function(method, key){\n\n            this[key] = method\n\n            this.prototype[key] = function(){\n                if (!arguments.length) return method.call(self, this)\n                var args = [this]\n                push.apply(args, arguments)\n                return method.apply(self, args)\n            }\n\n            g.prototype[key] = function(){\n                var value = this.valueOf()\n                if (!arguments.length) return method.call(self, value)\n                var args = [value]\n                push.apply(args, arguments)\n                return method.apply(self, args)\n            }\n\n        }, this)\n\n        return this\n    }\n\n    s.implement = function(object){\n\n        forIn(object, function(method, key){\n\n            this[key] = function(self){\n                return (arguments.length > 1) ? method.apply(self, slice.call(arguments, 1)) : method.call(self)\n            }\n\n            g.prototype[key] = function(){\n                return shell(method.apply(this.valueOf(), arguments))\n            }\n\n            this.prototype[key] = method\n\n        }, this)\n\n        return this\n    }\n\n    return s\n\n}\n\nfor (var types = [\"string\", \"number\", \"array\", \"object\", \"date\", \"function\", \"regexp\"], i = types.length; i--;) shell[types[i]] = register()\n\nmodule.exports = shell\n");
__$coverInitRange("_shell.js", "11:24");
__$coverInitRange("_shell.js", "25:126");
__$coverInitRange("_shell.js", "127:195");
__$coverInitRange("_shell.js", "196:682");
__$coverInitRange("_shell.js", "683:838");
__$coverInitRange("_shell.js", "839:2194");
__$coverInitRange("_shell.js", "2195:2336");
__$coverInitRange("_shell.js", "2337:2359");
__$coverInitRange("_shell.js", "265:334");
__$coverInitRange("_shell.js", "335:410");
__$coverInitRange("_shell.js", "411:492");
__$coverInitRange("_shell.js", "493:570");
__$coverInitRange("_shell.js", "571:675");
__$coverInitRange("_shell.js", "304:323");
__$coverInitRange("_shell.js", "375:399");
__$coverInitRange("_shell.js", "451:481");
__$coverInitRange("_shell.js", "533:559");
__$coverInitRange("_shell.js", "618:649");
__$coverInitRange("_shell.js", "650:669");
__$coverInitRange("_shell.js", "715:773");
__$coverInitRange("_shell.js", "774:803");
__$coverInitRange("_shell.js", "804:835");
__$coverInitRange("_shell.js", "871:908");
__$coverInitRange("_shell.js", "909:977");
__$coverInitRange("_shell.js", "978:1715");
__$coverInitRange("_shell.js", "1716:2181");
__$coverInitRange("_shell.js", "2182:2191");
__$coverInitRange("_shell.js", "947:969");
__$coverInitRange("_shell.js", "1016:1040");
__$coverInitRange("_shell.js", "1041:1692");
__$coverInitRange("_shell.js", "1693:1708");
__$coverInitRange("_shell.js", "1091:1122");
__$coverInitRange("_shell.js", "1123:1379");
__$coverInitRange("_shell.js", "1380:1674");
__$coverInitRange("_shell.js", "1173:1242");
__$coverInitRange("_shell.js", "1243:1276");
__$coverInitRange("_shell.js", "1277:1320");
__$coverInitRange("_shell.js", "1321:1364");
__$coverInitRange("_shell.js", "1427:1469");
__$coverInitRange("_shell.js", "1470:1540");
__$coverInitRange("_shell.js", "1541:1575");
__$coverInitRange("_shell.js", "1576:1619");
__$coverInitRange("_shell.js", "1620:1663");
__$coverInitRange("_shell.js", "1757:2158");
__$coverInitRange("_shell.js", "2159:2174");
__$coverInitRange("_shell.js", "1807:1974");
__$coverInitRange("_shell.js", "1975:2102");
__$coverInitRange("_shell.js", "2103:2140");
__$coverInitRange("_shell.js", "1851:1959");
__$coverInitRange("_shell.js", "2022:2087");
__$coverCall('_shell.js', '11:24');
'use strict';
__$coverCall('_shell.js', '25:126');
var prime = require('./index'), type = require('./type'), forIn = require('./object/forIn');
__$coverCall('_shell.js', '127:195');
var slice = Array.prototype.slice, push = Array.prototype.push;
__$coverCall('_shell.js', '196:682');
var ghost = prime({
        constructor: function ghost(self) {
            __$coverCall('_shell.js', '265:334');
            this.valueOf = function () {
                __$coverCall('_shell.js', '304:323');
                return self;
            };
            __$coverCall('_shell.js', '335:410');
            this.toString = function () {
                __$coverCall('_shell.js', '375:399');
                return self + '';
            };
            __$coverCall('_shell.js', '411:492');
            this.is = function (object) {
                __$coverCall('_shell.js', '451:481');
                return self === object;
            };
            __$coverCall('_shell.js', '493:570');
            this.get = function (index) {
                __$coverCall('_shell.js', '533:559');
                return self[index];
            };
            __$coverCall('_shell.js', '571:675');
            this.set = function (index, value) {
                __$coverCall('_shell.js', '618:649');
                self[index] = value;
                __$coverCall('_shell.js', '650:669');
                return self;
            };
        }
    });
__$coverCall('_shell.js', '683:838');
var shell = function (self) {
    __$coverCall('_shell.js', '715:773');
    if (self == null || self instanceof ghost)
        return self;
    __$coverCall('_shell.js', '774:803');
    var g = shell[type(self)];
    __$coverCall('_shell.js', '804:835');
    return g ? new g(self) : self;
};
__$coverCall('_shell.js', '839:2194');
var register = function () {
    __$coverCall('_shell.js', '871:908');
    var g = prime({ inherits: ghost });
    __$coverCall('_shell.js', '909:977');
    var s = prime(function (self) {
            __$coverCall('_shell.js', '947:969');
            return new g(self);
        });
    __$coverCall('_shell.js', '978:1715');
    s.extend = function (object) {
        __$coverCall('_shell.js', '1016:1040');
        var self = this;
        __$coverCall('_shell.js', '1041:1692');
        forIn(object, function (method, key) {
            __$coverCall('_shell.js', '1091:1122');
            this[key] = method;
            __$coverCall('_shell.js', '1123:1379');
            this.prototype[key] = function () {
                __$coverCall('_shell.js', '1173:1242');
                if (!arguments.length)
                    return method.call(self, this);
                __$coverCall('_shell.js', '1243:1276');
                var args = [this];
                __$coverCall('_shell.js', '1277:1320');
                push.apply(args, arguments);
                __$coverCall('_shell.js', '1321:1364');
                return method.apply(self, args);
            };
            __$coverCall('_shell.js', '1380:1674');
            g.prototype[key] = function () {
                __$coverCall('_shell.js', '1427:1469');
                var value = this.valueOf();
                __$coverCall('_shell.js', '1470:1540');
                if (!arguments.length)
                    return method.call(self, value);
                __$coverCall('_shell.js', '1541:1575');
                var args = [value];
                __$coverCall('_shell.js', '1576:1619');
                push.apply(args, arguments);
                __$coverCall('_shell.js', '1620:1663');
                return method.apply(self, args);
            };
        }, this);
        __$coverCall('_shell.js', '1693:1708');
        return this;
    };
    __$coverCall('_shell.js', '1716:2181');
    s.implement = function (object) {
        __$coverCall('_shell.js', '1757:2158');
        forIn(object, function (method, key) {
            __$coverCall('_shell.js', '1807:1974');
            this[key] = function (self) {
                __$coverCall('_shell.js', '1851:1959');
                return arguments.length > 1 ? method.apply(self, slice.call(arguments, 1)) : method.call(self);
            };
            __$coverCall('_shell.js', '1975:2102');
            g.prototype[key] = function () {
                __$coverCall('_shell.js', '2022:2087');
                return shell(method.apply(this.valueOf(), arguments));
            };
            __$coverCall('_shell.js', '2103:2140');
            this.prototype[key] = method;
        }, this);
        __$coverCall('_shell.js', '2159:2174');
        return this;
    };
    __$coverCall('_shell.js', '2182:2191');
    return s;
};
__$coverCall('_shell.js', '2195:2336');
for (var types = [
            'string',
            'number',
            'array',
            'object',
            'date',
            'function',
            'regexp'
        ], i = types.length; i--;)
    shell[types[i]] = register();
__$coverCall('_shell.js', '2337:2359');
module.exports = shell;