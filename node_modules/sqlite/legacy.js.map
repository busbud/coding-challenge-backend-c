{"version":3,"file":"legacy.js","sources":["../src/utils.js","../src/Statement.js","../src/Database.js","../src/main.js"],"sourcesContent":["/**\n * SQLite client library for Node.js applications\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nexport function prepareParams(args, { offset = 0, excludeLastArg = false } = {}) {\n  const hasOneParam = (args.length === (offset + 1 + (excludeLastArg ? 1 : 0)));\n  if (hasOneParam) {\n    return args[offset];\n  }\n  return Array.prototype.slice.call(args, offset, args.length - (excludeLastArg ? 1 : 0));\n}\n\nexport function resolveTemplateStringObject(args, { offset = 0, excludeLastArg = false } = {}) {\n  const hasOneParam = (args.length === (offset + 1 + (excludeLastArg ? 1 : 0)));\n  if (hasOneParam && typeof args[offset] === 'object') {\n    return {\n      sql: args[offset].sql,\n      params: args[offset].values,\n    };\n  }\n  return {\n    sql: args[offset],\n    params: prepareParams(args, { offset: offset + 1, excludeLastArg }),\n  };\n}\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport { prepareParams } from './utils';\n\nclass Statement {\n\n  constructor(stmt, Promise) {\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  get sql() {\n    return this.stmt.sql;\n  }\n\n  get lastID() {\n    return this.stmt.lastID;\n  }\n\n  get changes() {\n    return this.stmt.changes;\n  }\n\n  bind() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.bind(params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  reset() {\n    return new this.Promise((resolve) => {\n      this.stmt.reset(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  finalize() {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.finalize((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.run(params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.get(params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all() {\n    const params = prepareParams(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.stmt.all(params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  each() {\n    const params = prepareParams(arguments, { excludeLastArg: true });\n    const callback = arguments[arguments.length - 1];\n    return new this.Promise((resolve, reject) => {\n      this.stmt.each(params, callback, (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rowsCount);\n        }\n      });\n    });\n  }\n\n}\n\nexport default Statement;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n// eslint-disable-next-line no-unused-vars,import/no-unresolved,import/extensions\nimport sqlite3 from 'sqlite3'; // import sqlite3 for jsdoc type information only\nimport Statement from './Statement';\nimport { resolveTemplateStringObject } from './utils';\n\nclass Database {\n  /**\n   * Initializes a new instance of the database client.\n   * @param {sqlite3.Database} driver An instance of SQLite3 driver library.\n   * @param {{Promise: PromiseConstructor}} promiseLibrary ES6 Promise library to use.\n     */\n  constructor(driver, promiseLibrary) {\n    this.driver = driver;\n    this.Promise = promiseLibrary.Promise;\n  }\n\n  /**\n   * Close the database.\n   */\n  close() {\n    return new this.Promise((resolve, reject) => {\n      this.driver.close((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Register listeners for Sqlite3 events\n   *\n   * @param {'trace'|'profile'|'error'|'open'|'close'} eventName\n   * @param {() => void} listener trigger listener function\n   */\n  on(eventName, listener) {\n    this.driver.on(eventName, listener);\n  }\n\n  run() {\n    const { sql, params } = resolveTemplateStringObject(arguments);\n    const Promise = this.Promise;\n    return new Promise((resolve, reject) => {\n      this.driver.run(sql, params, function runExecResult(err) {\n        if (err) {\n          reject(err);\n        } else {\n          // Per https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n          // when run() succeeds, the `this' object is a driver statement object. Wrap it as a\n          // Statement.\n          resolve(new Statement(this, Promise));\n        }\n      });\n    });\n  }\n\n  get() {\n    const { sql, params } = resolveTemplateStringObject(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.driver.get(sql, params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all() {\n    const { sql, params } = resolveTemplateStringObject(arguments);\n    return new this.Promise((resolve, reject) => {\n      this.driver.all(sql, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n   */\n  exec(sql) {\n    return new this.Promise((resolve, reject) => {\n      this.driver.exec(sql, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each() {\n    const { sql, params } = resolveTemplateStringObject(arguments, { excludeLastArg: true });\n    const callback = arguments[arguments.length - 1];\n    return new this.Promise((resolve, reject) => {\n      this.driver.each(sql, params, callback, (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rowsCount);\n        }\n      });\n    });\n  }\n\n  prepare() {\n    const { sql, params } = resolveTemplateStringObject(arguments);\n    return new this.Promise((resolve, reject) => {\n      const stmt = this.driver.prepare(sql, params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(new Statement(stmt, this.Promise));\n        }\n      });\n    });\n  }\n\n  /**\n   * Set a configuration option for the database.\n   */\n  configure(option, value) {\n    this.driver.configure(option, value);\n  }\n\n  /**\n   * Migrates database schema to the latest version\n   */\n  async migrate({ force, table = 'migrations', migrationsPath = './migrations' } = {}) {\n    /* eslint-disable no-await-in-loop */\n    const location = path.resolve(migrationsPath);\n\n    // Get the list of migration files, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n    const migrations = await new this.Promise((resolve, reject) => {\n      fs.readdir(location, (err, files) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(files\n            .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n            .filter(x => x !== null)\n            .map(x => ({ id: Number(x[1]), name: x[2], filename: x[0] }))\n            .sort((a, b) => Math.sign(a.id - b.id)));\n        }\n      });\n    });\n\n    if (!migrations.length) {\n      throw new Error(`No migration files found in '${location}'.`);\n    }\n\n    // Ge the list of migrations, for example:\n    //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n    //   { id: 2, name: 'feature', fielname: '002-feature.sql', up: ..., down: ... }\n    await Promise.all(migrations.map(migration => new this.Promise((resolve, reject) => {\n      const filename = path.join(location, migration.filename);\n      fs.readFile(filename, 'utf-8', (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          const [up, down] = data.split(/^--\\s+?down\\b/mi);\n          if (!down) {\n            const message = `The ${migration.filename} file does not contain '-- Down' separator.`;\n            reject(new Error(message));\n          } else {\n            /* eslint-disable no-param-reassign */\n            migration.up = up.replace(/^-- .*?$/gm, '').trim();// Remove comments\n            migration.down = down.trim(); // and trim whitespaces\n            /* eslint-enable no-param-reassign */\n            resolve();\n          }\n        }\n      });\n    })));\n\n    // Create a database table for migrations meta data if it doesn't exist\n    await this.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`);\n\n    // Get the list of already applied migrations\n    let dbMigrations = await this.all(\n      `SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`,\n    );\n\n    // Undo migrations that exist only in the database but not in files,\n    // also undo the last migration if the `force` option was set to `last`.\n    const lastMigration = migrations[migrations.length - 1];\n    for (const migration of dbMigrations.slice().sort((a, b) => Math.sign(b.id - a.id))) {\n      if (!migrations.some(x => x.id === migration.id) ||\n        (force === 'last' && migration.id === lastMigration.id)) {\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.down);\n          await this.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n          await this.run('COMMIT');\n          dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Apply pending migrations\n    const lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n    for (const migration of migrations) {\n      if (migration.id > lastMigrationId) {\n        await this.run('BEGIN');\n        try {\n          await this.exec(migration.up);\n          await this.run(\n            `INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`,\n            migration.id, migration.name, migration.up, migration.down,\n          );\n          await this.run('COMMIT');\n        } catch (err) {\n          await this.run('ROLLBACK');\n          throw err;\n        }\n      }\n    }\n\n    /* eslint-enable no-await-in-loop */\n    return this;\n  }\n}\n\nexport default Database;\n","/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport sqlite3 from 'sqlite3';\nimport Database from './Database';\n\nconst promise = global.Promise;\nconst db = new Database(null, { Promise: promise });\n\n/**\n * Opens SQLite database.\n *\n * @returns Promise<Database> A promise that resolves to an instance of SQLite database client.\n */\ndb.open = (filename, {\n  mode = null,\n  verbose = false,\n  Promise = promise,\n  cached = false } = {}) => {\n  let driver;\n  let DBDriver = sqlite3.Database;\n\n  if (cached) {\n    DBDriver = sqlite3.cached.Database;\n  }\n\n  if (verbose) {\n    sqlite3.verbose();\n  }\n\n  return new Promise((resolve, reject) => {\n    if (mode !== null) {\n      driver = new DBDriver(filename, mode, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      driver = new DBDriver(filename, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    }\n  }).then(() => {\n    db.driver = driver;\n    db.Promise = Promise;\n    return new Database(driver, { Promise });\n  });\n};\n\nexport default db;\n"],"names":["prepareParams","args","offset","excludeLastArg","hasOneParam","length","Array","prototype","slice","call","resolveTemplateStringObject","babelHelpers.typeof","sql","values","Statement","stmt","Promise","params","arguments","resolve","reject","bind","err","reset","finalize","run","get","row","all","rows","callback","each","rowsCount","lastID","changes","Database","driver","promiseLibrary","close","eventName","listener","on","runExecResult","exec","prepare","option","value","configure","force","table","migrationsPath","path","readdir","location","files","map","x","match","filter","id","Number","name","filename","sort","a","b","Math","sign","migrations","Error","join","migration","readFile","data","split","up","down","message","replace","trim","some","lastMigration","dbMigrations","lastMigrationId","promise","global","db","open","mode","verbose","cached","DBDriver","sqlite3","then"],"mappings":"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"}